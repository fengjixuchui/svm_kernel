#![no_std]
#![no_main]
#![feature(custom_test_frameworks)] // https://github.com/rust-lang/rfcs/blob/master/text/2318-custom-test-frameworks.md
#![test_runner(perf_kernel::test_runner)]
#![reexport_test_harness_main = "test_main"]
#![feature(asm)]
#![feature(test)]
#![feature(bench_black_box)]
#![allow(unreachable_code)]
/*
 * Followed the tutorial here: https://os.phil-opp.com
 * TODO: Replace builtin memcpy, memset with optimized one
 */

/* TODO:
 * Write bootloader myself to be able to enable
 * mmx,sse & float features!
 * Should also solve the lto linktime warning
 */

/*
 * This kernel has been tested on an AMD x64 processor
 * family: 0x17h, model: 0x18h
 */

use core::ptr::addr_of_mut;

use bootloader::bootinfo;
use bootloader::entry_point;
extern crate alloc;

/*
 * KERNEL MAIN
 * The macro entry_point creates the nomangle _start func for us and checks that
 * the given function has the correct signature
 */
//TODO: rsp has to be 16 byte aligned
entry_point!(kernel_main);
fn kernel_main(_boot_info: &'static bootinfo::BootInfo) -> ! {
    unsafe {
        // Initialize routine for kernel
        perf_kernel::init(_boot_info);
    };

    // This func gets generated by cargo test
    #[cfg(test)]
    test_main();

    // let mut heap_addr = 0x5c00000 as *mut u8;
    // log::info!("write bytes to {:?}", heap_addr);
    // unsafe {
    //     core::ptr::write_bytes(heap_addr, 0xAA, 0x200000);
    // };

    // {
    //     use perf_kernel::{allocator::HEAP_START, allocator::HEAP_SIZE, allocator::ALLOCATOR, bench::Bench, klog, print, println};
    //     use core::hint::black_box;
    //     use alloc::boxed::Box;
    //     use alloc::vec::Vec;
    //     use core::intrinsics::copy;
    //     let mut vec:Vec::<usize> = Vec::new();
    //     let mut i = 0;
    //     let len = vec.len();
    //     let new_len = (HEAP_SIZE - 512) / core::mem::size_of::<usize>();
    //     log::info!("Start resize... new_len: {:x}, sizeof(usize) {:#x}",new_len, core::mem::size_of::<usize>());
    //     vec.resize_with(new_len, || { i+=1; i });
    //     log::info!("Done resizing.");
    //     let sum: usize = vec.iter().sum();
    
    //     let n = new_len-len;
    //     assert_eq!(sum, (n.pow(2)+n)/2);

    //     let mut vec2:Vec::<usize> = Vec::new();
    //     let mut i = 0;
    //     let len = vec2.len();
    //     let new_len = (HEAP_SIZE - 512) / core::mem::size_of::<usize>();
    //     log::info!("Start resize2...");
    //     vec2.resize_with(new_len, || { i+=1; i });
    //     log::info!("Done resizing2.");
    //     let sum: usize = vec.iter().sum();
    
    //     let n = new_len-len;
    //     assert_eq!(sum, (n.pow(2)+n)/2);
    //     black_box(vec);
    // }

    perf_kernel::hlt_loop();
}

/*
 * KERNEL PANIC HANDLER
 * Not used in cargo test
 */
//TODO: Implement a bare metal debugger
// https://lib.rs/crates/gdbstub
// https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html
// TODO: Make panic handler print stuff without a global lock
// If an error occurs while reading memory inside the print lock
// a deadlock occurs
#[panic_handler]
fn panic(info: &core::panic::PanicInfo) -> ! {
    perf_kernel::println!("{}", info);

    #[cfg(debug)]
    perf_kernel::exit_qemu(svm_kernel::QemuExitCode::Failed);

    #[cfg(not(debug))]
    loop {}
}
